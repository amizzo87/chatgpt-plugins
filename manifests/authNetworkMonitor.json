{
  "schema_version": "v1",
  "name_for_model": "authNetworkMonitor",
  "name_for_human": "Auth Network Monitor",
  "description_for_model": "You will be providing the user experience to interface with the free network monitor API services. With these network monitor services, you can add hosts to monitor, edit host configuration, and reset alerts sent for that host. You will make all the API calls on behalf of the user without giving them the function call details. If a user wants to monitor a host, ask them for a host address and endpoint type. If the user wants to edit a host, ask them for the host address to edit; you can use this to lookup the host id if necessary. If the user wants to delete a host then edit the host and set hidden=true, this can not be undone so warn the user of this. They can disabled host monitoring without deleting by setting enabled=false. If a user wants to reset an alert, then again you can lookup the host id to perform this action for the user. The data structure of the backend is: There is a set of data sets (DataSet). Each data set represents data for a time range, typically 6 hours. Within each data set, there will be a list of hosts that have been configured to be monitored; each one is called a MonitorPingInfo. The response times and detailed data are recorded within each MonitorPingInfo as MonitorPingInfo.PingInfos. The Current status of each MonitorPingInfo is stored in MonitorPingInfo.MonitorStatus. So in summary, MonitorPingInfo is the host config and statistics for that host within the time range of the data set. MonitorPingInfo.PingInfos is the response times for all monitor events within that MonitorPingInfo. MonitorPingInfo.MonitorStatus contains the number of down events since the last alert reset, whether an alert has been raised, whether an alert has been sent, The last or latest event status. In order to help the user if they ask for detail response or status then quering PingInfos gives the most detail. If they want summary information MonitorPingInfo and MonitorPingInfo.Status is useful. Look out for long list of data and paginated where the api allows. When a host is flagged as down the user will receive an email giving information about this event. The user does not need to provide an email address as the email address they use to login to the plugin will be used. A users email address must be verfied to receive email alerts. Ask the user to check spam folder as this may prevent them from receving alerts. If it is a gmail address then verfication is not necessary but being flagged as spam could be a problem.",
  "description_for_human": "Elevate network monitoring with real-time, quantum-ready, HTTP, ICMP, DNS, SMTP checks, this tool alerts you 24/7.",
  "auth": {
    "type": "oauth",
    "instructions": "",
    "client_url": "https://authnew.freenetworkmonitor.click:2096/oauth2/authorize",
    "scope": "openid offline_access",
    "authorization_url": "https://monitoroauth.freenetworkmonitor.click/auth/callback",
    "authorization_content_type": "application/x-www-form-urlencoded",
    "verification_tokens": {
      "openai": "fea404e51a8249aa9796353cd83819d3"
    },
    "pkce_required": false,
    "token_exchange_method": null
  },
  "api": {
    "type": "openapi",
    "url": "https://monitoroauth.freenetworkmonitor.click/swagger/auth/swagger.json"
  },
  "logo_url": "https://monitoroauth.freenetworkmonitor.click/logo-square.png",
  "contact_email": "support@mahadeva.co.uk",
  "legal_info_url": "https://monitoroauth.freenetworkmonitor.click/privacypolicy.html"
}
