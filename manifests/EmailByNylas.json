{"schema_version":"v1","name_for_model":"EmailByNylas","name_for_human":"Email by Nylas","description_for_model":"Use EmailByNylas for accessing email accounts through a conversational interface that follows the following guidelines:\n- For single email responses, if no format is specified, always sort by most recent to oldest and use the following example to format responses and do no summarize the email body unless the user requests it:\n    **Subject**: Fwd: Your receipt from ACME Store\n    **From**: ACME Store (owner@acmestore.com)\n    **To:** John Doe (john.doe@email.com)\n    **Date:** January 1, 2021 at 12:00 PM\n    **Email body:** \n    Hi John, Your receipt is attached. Thanks, ACME Store\n- For list responses, if no format is specified, always use the following example to format responses:\n    1. **Subject**: Fwd: Your receipt from Apple Store\n       **From**: Apple Store (owner@acmestore.com)\n       **To:** John Doe (john.doe@email.com)\n       **Date:** January 1, 2021 at 12:00 PM\n       **Unread**: Yes\n    2. **Subject**: Welcome to Nylas!\n       **From**: Nylas (admin@nylas.com)\n       **To:** John Doe (john.doe@email.com)\n       **Date:** February 1, 2021 at 12:00 PM\n       **Unread**: No\n- Always url encode all query parameter values (e.g ?q=subject:(hello world) becomes ?q=subject%3A%28hello%20world%29).\n- Always most recent email response within an email body when a user requests an email with multiple email responses.\n- Always follow the instructions in the \"message\" property for requests with HTTP401 statuses codes from the API.\n- Always first attempt to use the \"searchEmails\" operation for most user prompts that include filters, but never use a blank value for the \"q\" parameter.\n- For the \"searchEmails\" operation the \"q\" parameter can use the following tags to filter the results:\n* to: - The email address of the recipient.\n* from: - The email address of the sender.\n* cc: - The email address of the cc recipient.\n* bcc: - The email address of the bcc recipient.\n* subject: - The subject of the email.\n* has:attachment - The email has an attachment.\n* has:archive - The email has an archive.\n* in:inbox - The email is in the inbox.\n* in:sent - The email is in the sent folder.\n* in:archive - The email is in the archive folder.\n* after: - The email was sent after the specified date.\n* before: - The email was sent before the specified date.\n* older: - The email was sent before the specified date.\n* newer: - The email was sent after the specified date.\n* older_than: - Search for messages older or newer than a time period using d (day), m (month), and y (year)\n* newer_than: - Search for messages older or newer than a time period using d (day), m (month), and y (year)\n* +word - The email contains the specified word (e.g. \"word\").\n* subject:(dinner movie) - The email contains the specified words in the subject (e.g. \"dinner\" and \"movie\").\n- Always use the \"countEmails\" operation when dealing with aggregation requests.\n- Always use the \"getEmailBody\" operation when dealing with requests for email body content.\n- Always try and format the response from the \"getEmailBody\" operation as markdown to make it easier for the user to read. For example, if the email body contains a list, format it as a list in the response.\n- Always explain any limits or filters that are applied to the user's request (e.g. \"I've limited the results to the last 10 emails\").\n- Always use ISO 8601 for date and time formats in API queries.\n- Always use human readable formats for date and time formats when presenting to the user.\n- Always keep requesting the next set of results using the \"page\" and \"limit\" query parameters if the API response has a \"has_more_results\" with a \"true\" value property up to a maximum of 3 pages. After 3 pages, inform the user that they need to refine their prompt.\n- If presented in the API response, follow the prompts in the \"rules\" property of the response.","description_for_human":"Connect with any email provider and engage with your email data seamlessly.","auth":{"type":"oauth","instructions":"","client_url":"https://gpt.nylas.com/api/oauth/authorize","scope":"email.modify","authorization_url":"https://api.nylas.com/connect/token","authorization_content_type":"application/json","verification_tokens":{"openai":"e020c2bf429842969338108e56b80d67"}},"api":{"type":"openapi","url":"https://gpt.nylas.com/openapi.yaml"},"logo_url":"https://gpt.nylas.com/nylas-logo.svg","contact_email":"support@nylas.com","legal_info_url":"https://www.nylas.com/legal/terms/"}