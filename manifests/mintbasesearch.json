{"schema_version":"v1","name_for_model":"mintbasesearch","name_for_human":"MintbaseSearch","description_for_model":"Craft GraphQL queries based on the Prisma schema. \n\nGeneral guidelines:\n\n- ALWAYS use `limit` to avoid large responses.\n- ALWAYS use Hasura's syntax for building the queries. \n- ALWAYS use either \"testnet\" or \"mainnet\" for the `network`. Accounts ending in .near are generally mainnet accounts, .testnet are testnet ones.\n- ALWAYS generate GraphQL queries based on the schema defined below: \n\n```gql\nmodel mb_store_minters {\n  nft_contract_id String\n  minter_id       String\n  receipt_id      String?\n  timestamp       DateTime? @db.Timestamp(6)\n\n  @@id([nft_contract_id, minter_id])\n}\n\nmodel nft_activities {\n  receipt_id      String\n  tx_sender       String\n  sender_pk       String?\n  timestamp       DateTime @db.Timestamp(6)\n  nft_contract_id String\n  token_id        String\n  kind            String\n  action_sender   String?\n  action_receiver String?\n  memo            String?\n  price           Decimal? @db.Decimal\n  currency        String?\n\n  @@id([receipt_id, nft_contract_id, token_id, kind])\n}\n\nmodel nft_approvals {\n  nft_contract_id     String\n  token_id            String\n  approved_account_id String\n  approval_id         Decimal  @db.Decimal\n  receipt_id          String\n  timestamp           DateTime @db.Timestamp(6)\n\n  @@id([nft_contract_id, token_id, approved_account_id])\n}\n\nmodel nft_attributes {\n  nft_metadata_id        String\n  nft_contract_id        String\n  attribute_type         String\n  attribute_value        String?\n  attribute_display_type String?\n\n  @@id([nft_metadata_id, nft_contract_id, attribute_type])\n}\n\nmodel nft_contracts {\n  id                 String    @id\n  spec               String\n  name               String\n  symbol             String?\n  icon               String?\n  base_uri           String?\n  reference          String?\n  reference_hash     String?\n  created_at         DateTime? @db.Timestamp(6)\n  created_receipt_id String?\n  owner_id           String?\n  is_mintbase        Boolean\n  content_flag       String?\n  category           String?\n}\n\nmodel nft_earnings {\n  nft_contract_id String\n  token_id        String\n  market_id       String\n  approval_id     Decimal  @db.Decimal\n  offer_id        BigInt\n  receipt_id      String\n  timestamp       DateTime @db.Timestamp(6)\n  receiver_id     String\n  currency        String\n  amount          Decimal  @db.Decimal\n  is_referral     Boolean\n  is_mintbase_cut Boolean  @default(false)\n  is_affiliate    Boolean?\n\n  @@id([nft_contract_id, token_id, market_id, approval_id, receiver_id, is_referral, is_mintbase_cut])\n}\n\nmodel nft_metadata {\n  id              String  @id\n  nft_contract_id String\n  reference_blob  Json?\n  title           String?\n  description     String?\n  media           String?\n  media_hash      String?\n  reference       String?\n  reference_hash  String?\n  extra           String?\n  minter          String?\n  base_uri        String?\n  content_flag    String?\n}\n\n\nview mb_views_nft_metadata {\n  id                        String    @id\n  nft_contract_id           String?\n  reference_blob            Json?\n  title                     String?\n  description               String?\n  media                     String?\n  media_hash                String?\n  extra                     String?\n  metadata_content_flag     String?\n  nft_contract_name         String?\n  nft_contract_symbol       String?\n  nft_contract_icon         String?\n  nft_contract_spec         String?\n  base_uri                  String?\n  nft_contract_reference    String?\n  nft_contract_created_at   DateTime? @db.Timestamp(6)\n  nft_contract_owner_id     String?\n  nft_contract_is_mintbase  Boolean?\n  nft_contract_content_flag String?\n}\n\nview mb_views_active_listings {\n  nft_contract_id String\n  token_id        String\n  market_id       String\n  approval_id     Decimal   @db.Decimal\n  created_at      DateTime? @db.Timestamp(6)\n  receipt_id      String?\n  kind            String?\n  price           Decimal?  @db.Decimal\n  currency        String?\n  listed_by       String?\n  metadata_id     String?\n  reference       String?\n  minter          String?\n  title           String?\n  description     String?\n  reference_blob  Json?\n  media           String?\n  extra           String?\n  base_uri        String?\n  content_flag    String?\n\n  @@id([nft_contract_id, token_id, market_id, approval_id])\n}\n\n\nview mb_views_nft_tokens {\n  nft_contract_id           String\n  token_id                  String\n  owner                     String?\n  mint_memo                 String?\n  last_transfer_timestamp   DateTime? @db.Timestamp(6)\n  last_transfer_receipt_id  String?\n  minted_timestamp          DateTime? @db.Timestamp(6)\n  minted_receipt_id         String?\n  burned_timestamp          DateTime? @db.Timestamp(6)\n  burned_receipt_id         String?\n  minter                    String?\n  reference                 String?\n  reference_hash            String?\n  copies                    BigInt?\n  issued_at                 DateTime? @db.Timestamp(6)\n  expires_at                DateTime? @db.Timestamp(6)\n  starts_at                 DateTime? @db.Timestamp(6)\n  updated_at                DateTime? @db.Timestamp(6)\n  metadata_id               String?\n  reference_blob            Json?\n  title                     String?\n  description               String?\n  media                     String?\n  media_hash                String?\n  extra                     String?\n  metadata_content_flag     String?\n  nft_contract_name         String?\n  nft_contract_symbol       String?\n  nft_contract_icon         String?\n  nft_contract_spec         String?\n  base_uri                  String?\n  nft_contract_reference    String?\n  nft_contract_created_at   DateTime? @db.Timestamp(6)\n  nft_contract_owner_id     String?\n  nft_contract_is_mintbase  Boolean?\n  nft_contract_content_flag String?\n  royalties_percent         Int?\n  royalties                 Json?\n  splits                    Json?\n\n  @@id([nft_contract_id, token_id])\n}\n\nview mb_views_nft_tokens_with_listing {\n  nft_contract_id String\n  token_id        String\n  owner           String?\n  metadata_id     String?\n  price           Decimal? @db.Decimal\n  currency        String?\n  reference_blob  Json?\n  content_flag    String?\n\n  @@id([nft_contract_id, token_id])\n}\n\n\nview mb_views_active_listings_by_contract {\n  nft_contract_id String\n  base_uri        String?\n  price           Decimal?  @db.Decimal\n  currency        String?\n  created_at      DateTime? @db.Timestamp(6)\n  metadata_id     String?\n  token_id        String\n  market_id       String\n  approval_id     Decimal   @db.Decimal\n  listed_by       String?\n  total_listings  BigInt?\n  title           String?\n  media           String?\n\n  @@id([nft_contract_id, token_id, market_id, approval_id])\n}\n\n```","description_for_human":"Find any NFT data on the NEAR Protocol.","auth":{"type":"none"},"api":{"type":"openapi","url":"https://search-ai.mintbase.xyz/openapi.json"},"logo_url":"https://search-ai.mintbase.xyz/.well-known/search/logo.png","contact_email":"admin@mintbase.xyz","legal_info_url":"https://search-ai.mintbase.xyz/legal"}